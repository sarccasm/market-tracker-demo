{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let MarketService = /*#__PURE__*/(() => {\n  class MarketService {\n    constructor(http) {\n      this.http = http;\n      this.API_KEY = 'd0qrei9r01qn4tjepta0d0qrei9r01qn4tjeptag';\n      this.REST_URL = 'https://finnhub.io/api/v1/crypto/candle';\n    }\n    getHistoricalPrices(symbol) {\n      const url = `${this.REST_URL}?symbol=BINANCE:${symbol}&resolution=1&count=30&token=${this.API_KEY}`;\n      return this.http.get(url);\n    }\n    connectToWebSocket(symbol) {\n      return new Observable(observer => {\n        const ws = new WebSocket(`wss://ws.finnhub.io?token=${this.API_KEY}`);\n        ws.onopen = () => {\n          ws.send(JSON.stringify({\n            type: 'subscribe',\n            symbol: `BINANCE:${symbol}`\n          }));\n        };\n        ws.onmessage = event => {\n          const data = JSON.parse(event.data);\n          const msg = data.data?.[0];\n          if (msg?.p && msg?.t) {\n            observer.next({\n              price: msg.p,\n              time: new Date(msg.t).toLocaleTimeString()\n            });\n          }\n        };\n        ws.onerror = err => observer.error(err);\n        ws.onclose = () => observer.complete();\n      });\n    }\n    static {\n      this.ɵfac = function MarketService_Factory(t) {\n        return new (t || MarketService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: MarketService,\n        factory: MarketService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return MarketService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}